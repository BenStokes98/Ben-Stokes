-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/githubuser/program-project#readme</a>
@package program-project
@version 0.1.0.0

module Fetch

-- | Request to URL and convert the response to String
download :: URL -> IO ByteString

module Types
data Entry
Entry :: Maybe Int -> Maybe Int -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe Int -> Entry
[weight_] :: Entry -> Maybe Int
[runtime_] :: Entry -> Maybe Int
[premiered_] :: Entry -> Maybe String
[ended_] :: Entry -> Maybe String
[language_] :: Entry -> Maybe String
[site_] :: Entry -> Maybe String
[status_] :: Entry -> Maybe String
[fk_program1] :: Entry -> Maybe Int
data Program
Program :: Maybe Int -> String -> Program
[id_] :: Program -> Maybe Int
[program_] :: Program -> String
data Summary
Summary :: Maybe String -> Maybe Int -> Summary
[summary_] :: Summary -> Maybe String
[fk_program2] :: Summary -> Maybe Int
data Record
Record :: Maybe Int -> Maybe Int -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> String -> Maybe String -> Record
[weight] :: Record -> Maybe Int
[runtime] :: Record -> Maybe Int
[premiered] :: Record -> Maybe String
[ended] :: Record -> Maybe String
[language] :: Record -> Maybe String
[site] :: Record -> Maybe String
[status] :: Record -> Maybe String
[program] :: Record -> String
[summary] :: Record -> Maybe String
data ShowWithDate
ShowWithDate :: Maybe Int -> String -> Maybe String -> ShowWithDate
[show_id] :: ShowWithDate -> Maybe Int
[show_title] :: ShowWithDate -> String
[show_date] :: ShowWithDate -> Maybe String
data RandomSummary
RandomSummary :: Maybe String -> Maybe String -> RandomSummary
[guess_summary] :: RandomSummary -> Maybe String
[guess_status] :: RandomSummary -> Maybe String
instance GHC.Show.Show Types.Entry
instance GHC.Show.Show Types.Program
instance GHC.Show.Show Types.Summary
instance GHC.Show.Show Types.RandomSummary
instance GHC.Show.Show Types.ShowWithDate
instance GHC.Generics.Generic Types.Record
instance GHC.Show.Show Types.Record
instance Database.SQLite.Simple.FromRow.FromRow Types.Record
instance Data.Aeson.Types.FromJSON.FromJSON Types.Record
instance Database.SQLite.Simple.FromRow.FromRow Types.ShowWithDate
instance Database.SQLite.Simple.ToRow.ToRow Types.ShowWithDate
instance Database.SQLite.Simple.FromRow.FromRow Types.RandomSummary
instance Database.SQLite.Simple.ToRow.ToRow Types.RandomSummary
instance Database.SQLite.Simple.FromRow.FromRow Types.Summary
instance Database.SQLite.Simple.ToRow.ToRow Types.Summary
instance Database.SQLite.Simple.FromRow.FromRow Types.Program
instance Database.SQLite.Simple.ToRow.ToRow Types.Program
instance Database.SQLite.Simple.FromRow.FromRow Types.Entry
instance Database.SQLite.Simple.ToRow.ToRow Types.Entry

module Parse
parseRecords :: ByteString -> Either String [Record]


module Database

-- | Database initialisation and helpers functions
initialiseDB :: IO Connection

-- | Insert the date into the database
getOrCreateProgram :: Connection -> String -> IO Program

-- | Create a record and insert the value in entry table
createRecord :: Connection -> Record -> IO ()

-- | Invoke function to create entries records
saveRecordsEntries :: Connection -> [Record] -> IO ()

-- | Invoke function to create summary records
saveRecordsSummary :: Connection -> [Record] -> IO ()

-- | Insert the data inside the summary table
createSummary :: Connection -> Record -> IO ()

-- | Error handling for Integers
maybeRead :: Read a => String -> Maybe a

-- | Generate random number between 1, 230 (the number of records in our
--   database)
getRandomInt :: IO Int

-- | QUERIES Display certain number of shows
queryProgramAllEntries :: Connection -> IO [Program]

-- | Show the summary of a particular show
queryProgramSummary :: Connection -> IO [Summary]

-- | Show all shows that ended
queryAllProgramEnded :: Connection -> IO [ShowWithDate]

-- | Show all the programs premiered before a certain year
queryProgramPremieredDate :: Connection -> IO [ShowWithDate]

-- | Display the 4 random options + the solution record to the game
query5RandomPrograms :: Connection -> Int -> IO [Program]

-- | Display the random summary and it's status
queryProgramRandomSummary :: Connection -> Int -> IO [RandomSummary]

-- | With help of the queryRunningProgram, count the numbers of records
countAllRunningProgram :: Connection -> IO ()

-- | Helper query - query all programs that are running
queryRunningProgram :: Connection -> IO [ShowWithDate]

module Main
main :: IO ()
