-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Welcome to our Haskell Project, we hope you enjoy!
@package haskell-project
@version 0.1.0.0


module Fetch

-- | Request to URL and convert the response to String
download :: URL -> IO ByteString


module Types

-- | The Entry data type is used to create rows in the entries table. Use
--   case : Database.createRecord
data Entry
Entry :: Maybe Int -> Maybe Int -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe Int -> Entry
[weight_] :: Entry -> Maybe Int
[runtime_] :: Entry -> Maybe Int
[premiered_] :: Entry -> Maybe String
[ended_] :: Entry -> Maybe String
[language_] :: Entry -> Maybe String
[site_] :: Entry -> Maybe String
[status_] :: Entry -> Maybe String
[fk_program1] :: Entry -> Maybe Int

-- | The Program data type is used to support the conversion for SQL
--   operations.
--   
--   The Program data type is used to create rows in the program table.
--   
--   Use case : Database.queryProgramAllEntries,
--   Database.queryProgramSummary
data Program
Program :: Maybe Int -> String -> Program
[id_] :: Program -> Maybe Int
[program_] :: Program -> String

-- | The Summary data type is used to support the conversion for SQL
--   operations.
--   
--   The Summary data type is used to create rows in the summary table.
--   
--   Use case : Database.createSummary, Database.query5RandomPrograms
data Summary
Summary :: Maybe String -> Maybe Int -> Summary
[summary_] :: Summary -> Maybe String
[fk_program2] :: Summary -> Maybe Int

-- | Used to convert raw json data into readable data type in Haskell
--   
--   Use Case: Database.saveRecordsEntries, Database.saveRecordsSummary
data Record
Record :: Maybe Int -> Maybe Int -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> Maybe String -> String -> Maybe String -> Record
[weight] :: Record -> Maybe Int
[runtime] :: Record -> Maybe Int
[premiered] :: Record -> Maybe String
[ended] :: Record -> Maybe String
[language] :: Record -> Maybe String
[site] :: Record -> Maybe String
[status] :: Record -> Maybe String
[program] :: Record -> String
[summary] :: Record -> Maybe String

-- | The ShowWithDate data type is used to support SQL operaions that
--   includes dates.
--   
--   Use case : Database.queryAllProgramEnded,
--   Database.queryRunningProgram, Database.queryProgramPremieredDate
data ShowWithDate
ShowWithDate :: Maybe Int -> String -> Maybe String -> ShowWithDate
[show_id] :: ShowWithDate -> Maybe Int
[show_title] :: ShowWithDate -> String
[show_date] :: ShowWithDate -> Maybe String

-- | The RandomSummary data type is used to support the random mini game
--   and SQL operaions.
--   
--   Use case : Database.queryProgramRandomSummary
data RandomSummary
RandomSummary :: Maybe String -> Maybe String -> RandomSummary
[guess_summary] :: RandomSummary -> Maybe String
[guess_status] :: RandomSummary -> Maybe String

-- | Rename certiain fields to imporove readibility and resolve naming
--   ambiguity
renameFields :: String -> String

-- | Setting default options for <a>FromJSON</a>
--   
--   omitNothingFields = True - Null values are now considered.
customOptions :: Options
instance GHC.Show.Show Types.Entry
instance GHC.Show.Show Types.Program
instance GHC.Show.Show Types.Summary
instance GHC.Show.Show Types.RandomSummary
instance GHC.Show.Show Types.ShowWithDate
instance GHC.Generics.Generic Types.Record
instance GHC.Show.Show Types.Record
instance Database.SQLite.Simple.FromRow.FromRow Types.Record
instance Data.Aeson.Types.FromJSON.FromJSON Types.Record
instance Database.SQLite.Simple.FromRow.FromRow Types.ShowWithDate
instance Database.SQLite.Simple.ToRow.ToRow Types.ShowWithDate
instance Database.SQLite.Simple.FromRow.FromRow Types.RandomSummary
instance Database.SQLite.Simple.ToRow.ToRow Types.RandomSummary
instance Database.SQLite.Simple.FromRow.FromRow Types.Summary
instance Database.SQLite.Simple.ToRow.ToRow Types.Summary
instance Database.SQLite.Simple.FromRow.FromRow Types.Program
instance Database.SQLite.Simple.ToRow.ToRow Types.Program
instance Database.SQLite.Simple.FromRow.FromRow Types.Entry
instance Database.SQLite.Simple.ToRow.ToRow Types.Entry


module Parse

-- | Converting JSON record to Haskell <a>Record</a> type
parseRecords :: ByteString -> Either String [Record]


module Database

-- | Method to create database shows.db using Database.SQLite.Simple.
initialiseDB :: IO Connection

-- | Insert records into program table.
--   
--   Able to prevent dulpication of records in the table.
getOrCreateProgram :: Connection -> String -> IO Program

-- | Creates a record with type <a>Entry</a> from the <a>Record</a> values
--   and inserts into the entries table.
createRecord :: Connection -> Record -> IO ()

-- | Invoke function to create entries records.
--   
--   Calls upon the <a>createRecord</a> funtion to complete the process.
saveRecordsEntries :: Connection -> [Record] -> IO ()

-- | Invoke function to create summary records.
--   
--   Calls upon the <a>createSummary</a> funtion to complete the process.
saveRecordsSummary :: Connection -> [Record] -> IO ()

-- | Creates a record with type <a>Summary</a> from the <a>Record</a>
--   values and inserts into the entries table.
createSummary :: Connection -> Record -> IO ()

-- | Error handling for Integers
--   
--   Uses Import Data.Maybe (listToMaybe) for preset of <a>listToMaybe</a>
--   method.
maybeRead :: Read a => String -> Maybe a

-- | Generate random number between 1 and 230 (the number of records in our
--   database).
--   
--   Makes use of the <a>listToInt</a> function and System.Random import.
getRandomInt :: Connection -> IO Int
countRecords :: Connection -> IO [Program]

-- | Takes the query generated from <a>queryRunningProgram</a> and counts
--   the numbers of rows produced.
countRecordsInt :: Connection -> IO Int

-- | Display certain number of shows based on user input.
--   
--   Includes error handeling which prevents users from entering non
--   interger records, by using the <a>maybeRead</a> method.
--   
--   Output is of type <a>Program</a> list.
queryProgramAllEntries :: Connection -> IO [Program]

-- | Show the summary of a particular show.
--   
--   Includes error handeling which prevents users from entering non
--   interger records, by using the <a>maybeRead</a> method.
--   
--   Output is of type <a>Summary</a> list, to display only the show
--   summary and record ID.
queryProgramSummary :: Connection -> IO [Summary]

-- | Show all shows that have a status of Ended.
--   
--   Displays output of type <a>ShowWithDate</a>.
queryAllProgramEnded :: Connection -> IO [ShowWithDate]

-- | Show all the programs premiered before user defined year.
--   
--   Displays output of type <a>ShowWithDate</a>.
queryProgramPremieredDate :: Connection -> IO [ShowWithDate]

-- | Display the 4 random options + the solution record to the game
query5RandomPrograms :: Connection -> Int -> IO [Program]

-- | Display the random summary and its status.
--   
--   Output is a list of <a>RandomSummary</a> records.
queryProgramRandomSummary :: Connection -> Int -> IO [RandomSummary]

-- | Takes the query generated from <a>queryRunningProgram</a> and counts
--   the numbers of rows produced.
countAllRunningProgram :: Connection -> IO ()

-- | Background method for <a>countAllRunningProgram</a>.
--   
--   Queries all programs that are running and outputs the result with type
--   <a>ShowWithDate</a>.
queryRunningProgram :: Connection -> IO [ShowWithDate]


module Main

-- | Display menu to allow the user to execute a command.
main :: IO ()
